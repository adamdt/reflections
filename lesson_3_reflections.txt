1) When would you want to use a remote repository rather than keeping all your work local?

	Remote repositories could be used to access your code from more than one workstation
	and/or to allow multiple people to access/update your code without having to manually
	send/receive files.

2) Why might you want to always pull changes manually rather than having Git automatically
stay up-to-date with your remote repository?

	Manually pulling changes ensures that you only change the contents of your local
	repository when you want to, rather than potentially pulling changes to the code
	you're working on without you realizing or wanting it. For instance, if you're working
	on a collaborative project and updating a feature, but someone else pushes an update
	that could break your code, you'd want to make sure that you were aware of that before
	you pulled that update to your local repository, probably after you had finished your
	feature update.

3) Describe the differences between forks, clones, and branches. When would you use one
instead of another?

	A fork is a clone of a repository on GitHub to another account on GitHub. You'd use it
	if you wanted to make changes to a repository that you didn't have permission to edit.
	A clone is a copy of a repository on GitHub or a local machine to another location.
	You'd use it if you wanted to work on a GitHub repository on your local machine or
	create a copy of a repository on your local machine in another location. A branch is a
	set of commits that goes in a different direction from the main version of the
	project. You'd use it if you wanted to make a new feature or fix a bug while retaining
	a working copy of the project.

4) What is the benefit of having a copy of the last known state of the remote stored
locally?

	It helps you to know, without an internet connection, how your repository differs from
	the remote. It also helps the merge process by ensuring neither party's edits get
	neglected unintentionally.

5) How would you collaborate without using Git or GitHub? What would be easier, and what
would be harder?

	I suppose I'd try to use some file sharing service like Dropbox or Google Drive, but
	there would be no automatic version controlling suited to collaboration like there is
	in Git. It might be slightly easier just because I wouldn't have to control everything
	from a command line and remember all the commands, but it would be harder because I'd
	have to upload everything manually anyway, but wouldn't get features like pull
	requests, branching, etc.

6) When would you want to make changes in a separate branch rather than directly in
master? What benefits does each approach have?

	If I was collaborating, I'd make changes in a separate branch any time they changed
	the logic of the program, since they could potentially break or otherwise affect
	another user's code; however, if I was working on my own, I'd probably only do it when
	introducing a major change/new feature.